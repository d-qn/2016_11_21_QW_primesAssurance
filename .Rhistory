rename(annee = `Année`, pop = `Population résidante`)
data %<>%
mutate(perc = ifelse(is.na(as.numeric(perc)), 0, as.numeric(perc)), value = (perc / 100) * pop)
# data %<>% group_by(annee, religion) %>%
#   mutate(perc_religion = (sum(value) / pop_tot) * 100) %>%
#   ungroup() %>%
#   arrange(annee, religion, nat)
# check
chk <- data %>% group_by(annee) %>%
summarise(totperc = round(sum(perc, na.rm = T), 0)) %>%
ungroup() %>% select(totperc) %>% unlist()
stopifnot(chk == 100)
## Remove sans indication and recompute % and value
newpop <- data %>% filter(religion == "Sans indication") %>%
mutate(pop = pop - value) %>% select(annee, pop)
data %<>% filter(religion != "Sans indication") %>%
select(-pop) %>% left_join(newpop) %>%
mutate(perc = (value/pop) * 100)
# assign colour to religion
reg2col <- structure(
c("Evangélique réformé (protestant)", "Catholique romain",
"Autres communautés chrétiennes", "Communautés juives",
"Communautés islamiques", "Autres églises et communautés",
"Sans confession"),
names = c(swi_col[1], swi_col[2], swi_col[3],
swi_col[4], swi_col[8], swi_col[5],
"#120807"
))
showinLegend <- c("Autres communautés chrétiennes", "Communautés juives",
"Communautés islamiques", "Autres églises et communautés")
data %<>% mutate(religion = factor(religion, levels = rev(reg2col)))
# assign colors to relgion-nationality using different colorBrewever palette
data$color <- names(reg2col)[match(data$religion, reg2col )]
data %<>% arrange(desc(religion))
lang <- 'FR'
hc <- hchart(data, "areaspline",
hcaes(x = annee, y = perc, group = religion),
fillOpacity = 0.8,  lineWidth = 0,
stacking = T, marker = list(
enabled = F,
symbol = "circle",
radius = 0,
states = list(hover = list(enabled = T, radius = 2, radiusPlus = 2, lineWidthPlus = 1))
)
)
#hc
## hack to hide in legend!!!
for(i in 1:length(hc$x$hc_opts$series)) {
if(!hc$x$hc_opts$series[[i]]$name %in% showinLegend) {
hc$x$hc_opts$series[[i]]$showInLegend <- F
}
}
hc %<>% hc_add_theme(hc_theme_swi) %>%
hc_colors(colors = rev(names(reg2col))) %>%
hc_yAxis(title = list(text = ""), tickAmount = 5,
minorGridLineWidth = 0,
opposite = ifelse(lang == "AR", T, F),
labels = list(useHTML =T, tickLength = 7,
format = "{value}%"), max = 100
# style = list(fontSize = "12px")
) %>%
hc_xAxis(title = list(text = ""), lineWidth = 0.5,
max = max(data$annee), min = min(data$annee),
lineColor = "#2F343B", tickWidth = 1.5, tickLength = 7,
tickColor = "#2F343B", reversed = ifelse(lang == "AR", T, F)
) %>%
hc_legend(useHTML = T, floating = F, x = ifelse(lang == 'AR', -30, 30),
# title = list(text = txt["legend.key", lang]),
verticalAlign = "top", align = ifelse(lang == 'AR', "right", "left"),
rtl = ifelse(lang == "AR", T, F),
itemStyle = list("fontSize"= "0.8em"))  %>%
hc_size(height = 570) %>%
hc_chart(marginTop = 40)
## annotations https://stackoverflow.com/questions/45197045/highcharter-add-multiple-text-annotations
## highcharts api for annotations: https://www.highcharts.com/plugin-registry/single/17/Annotations
df <- data_frame(
xValue = c(1911, 1911, 2013),
yValue = c(2, 75, 99),
anchorX = c("left", "left", "right"),
anchorY = c("bottom", "middle", "top"),
title = c("Evangélique réformé (protestant)", "Catholique romain", "Sans confession"),
color = c("#0e1d25", "#3e525b", "#efe9e0"),
fontSize = c("2em", "2em", "2em")
)
df <- df %>%
mutate(title = pmap(list(title, color, fontSize),
function(title, color, fontSize) list(text = title,
style = list(color = color, fontSize = fontSize))))
hc %>%
hc_add_annotations(df)
?pathOptions
library(leaflet)
pathOptions
?pathOptions
devtools::install_github("dreamRs/addinit")
setwd("~/swissinfo/2016_Q4/2016_11_21_QW_primesAssurance")
translation.file <- "input/Health insurance base 2017 - Sheet1.csv"
data.file <- "data/Prämien_CH.csv"
insurer.file <- "data/insurer_CH_01_10_2016.csv"
library(readr)
library(tidyr)
library(dplyr)
library(magrittr)
library(countrycode)
library(ggplot2)
library(swiMap)
library(swiTheme)
library(viridis)
library(ggiraph)
library(htmltools)
library(swiRcharts)
```
```{r load data, include=F}
data.read <- read.csv(data.file)
data.read <- read.csv2(data.file)
data.read <- read.csv2(data.file)
data.read <- read.csv(data.file, encoding = "latin1")
str(data.read)
data.read <- read.csv2(data.file, encoding = "latin1")
translation.file <- "input/Health insurance base 2017 - Sheet1.csv"
data.file <- "data/Prämien_CH.csv"
insurer.file <- "data/insurer_CH_01_10_2016.csv"
library(readr)
library(tidyr)
library(dplyr)
library(magrittr)
library(countrycode)
library(ggplot2)
library(swiMap)
library(swiTheme)
library(viridis)
library(ggiraph)
library(htmltools)
library(swiRcharts)
data.read <- read.csv2(data.file, encoding = "latin1")
#insurer <- read.csv(insurer.file)
data.read <- data.read %>% select(-Hoheitsgebiet, -Geschäftsjahr, -Erhebungsjahr)
txt <- loadTranslation(translation.file)
# select: tarif : BASE (not HMO, ..)
# sans assurance accident, adultes, franchise 500.-
dd <- data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
# order canton by average prime
dd %<>% group_by(Kanton, Versicherer) %>%
summarise(prime = mean(Prämie)) %>% ungroup()
ct.ordered <- dd %>% group_by(Kanton) %>% summarise(meanPrime = mean(prime)) %>%
ungroup() %>% arrange(meanPrime) %>% select(Kanton) %>% unlist(use.names = F) %>% as.character()
dd$Kanton <- factor(dd$Kanton, levels = ct.ordered)
# order insurer by average prime
insurer.ordered <- dd %>% group_by(Kanton) %>% mutate( rk = rank(prime)) %>% ungroup()
insurer.rank <- insurer.ordered %>% group_by(Versicherer) %>% summarise(meanRank = mean(rk)) %>%
ungroup() %>% arrange(meanRank)
insurer.ordered <- insurer.rank %>% select(Versicherer)  %>% unlist(use.names = F)
names(insurer.ordered) <- insurer[match(insurer.ordered, insurer[,1]), 'shortName']
# select: tarif : BASE (not HMO, ..)
# sans assurance accident, adultes, franchise 500.-
dd <- data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
# order canton by average prime
dd %<>% group_by(Kanton, Versicherer) %>%
summarise(prime = mean(Prämie)) %>% ungroup()
ct.ordered <- dd %>% group_by(Kanton) %>% summarise(meanPrime = mean(prime)) %>%
ungroup() %>% arrange(meanPrime) %>% select(Kanton) %>% unlist(use.names = F) %>% as.character()
dd$Kanton <- factor(dd$Kanton, levels = ct.ordered)
# order insurer by average prime
insurer.ordered <- dd %>% group_by(Kanton) %>% mutate( rk = rank(prime)) %>% ungroup()
insurer.rank <- insurer.ordered %>% group_by(Versicherer) %>% summarise(meanRank = mean(rk)) %>%
ungroup() %>% arrange(meanRank)
insurer.ordered <- insurer.rank %>% select(Versicherer)  %>% unlist(use.names = F)
names(insurer.ordered) <- insurer[match(insurer.ordered, insurer[,1]), 'shortName']
data.read <- read.csv2(data.file, encoding = "latin1")
insurer <- read.csv(insurer.file)
data.read <- data.read %>% select(-Hoheitsgebiet, -Geschäftsjahr, -Erhebungsjahr)
txt <- loadTranslation(translation.file)
# select: tarif : BASE (not HMO, ..)
# sans assurance accident, adultes, franchise 500.-
dd <- data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
# order canton by average prime
dd %<>% group_by(Kanton, Versicherer) %>%
summarise(prime = mean(Prämie)) %>% ungroup()
ct.ordered <- dd %>% group_by(Kanton) %>% summarise(meanPrime = mean(prime)) %>%
ungroup() %>% arrange(meanPrime) %>% select(Kanton) %>% unlist(use.names = F) %>% as.character()
dd$Kanton <- factor(dd$Kanton, levels = ct.ordered)
# order insurer by average prime
insurer.ordered <- dd %>% group_by(Kanton) %>% mutate( rk = rank(prime)) %>% ungroup()
insurer.rank <- insurer.ordered %>% group_by(Versicherer) %>% summarise(meanRank = mean(rk)) %>%
ungroup() %>% arrange(meanRank)
insurer.ordered <- insurer.rank %>% select(Versicherer)  %>% unlist(use.names = F)
names(insurer.ordered) <- insurer[match(insurer.ordered, insurer[,1]), 'shortName']
dd$insurerName <- factor(insurer[match(dd$Versicherer,  insurer[,1]), 'shortName'], levels = names(insurer.ordered))
dd$insurerRank <- insurer.rank[match(dd$Versicherer, insurer.rank$Versicherer), 'meanRank'] %>% unlist(use.names = F)
lang <- 'FR'
for(lang in colnames(txt)) {
cat("\n", lang)
langr <- ifelse(lang == 'AR', 'EN', lang)
ddd <- dd
ct.lang <- switch(lang,
'EN' = 'eng', 'FR' = 'fre', 'DE' = 'ger',
'IT' = 'ita', 'PT' = 'por', 'RU' = 'rus',
'ES' = 'spa', 'JA' = 'jpn', 'ZH' = 'chi',
'AR' = 'eng'
)
ddd$canton <- canton_CH[match(ddd$Kanton, canton_CH$iso2), ct.lang]
ddd$canton <- factor(ddd$canton, canton_CH[match(ct.ordered, canton_CH$iso2), ct.lang])
gp <- ggplot(data = ddd) +
# geom_violin(aes(x = canton, y = prime, group = canton), linetype = "blank", fill = "#e5dbcd", alpha = 0.6) +
geom_line(data = ddd %>% group_by(canton) %>% summarise(prime = median(prime)) %>%
ungroup(), aes(x = canton, y = prime, group = 1), size = 0.5, alpha = 0.9, colour = "darkgrey") +
geom_line_interactive(aes(x = canton, y = prime, group = insurerName, color = insurerRank, tooltip = insurerName, data_id = insurerName), size = 0.15, alpha = 0.25) +
geom_point(aes(x = canton, y = prime, group = insurerName, color = insurerRank), size = 0.8, alpha = 0.6, shape = 18) +
geom_text(data  = ddd %>% filter(Kanton == "GE"), aes(x = canton, y = prime, label = insurerName), nudge_y = -1, nudge_x = 0.35, hjust = 0, size = 2, family = "Open Sans Condensed", check_overlap = T, colour = "#330033") +
swi_theme(y_gridlines = F, base_size = 12, base_family = "Open Sans Condensed") +
theme(
legend.position = "none",
axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5),
axis.text.y = element_text(margin=margin(0,-1.5,0,0) ),
plot.background=element_rect(fill= "#f3f3f2", colour = "#f3f3f2"),
plot.margin = unit(c(0, 0.5, ifelse(lang == 'ZH', 1, -2), -0.8), "lines")
)+
scale_color_viridis(option = "C") +
scale_x_discrete(expand = c(0, 2.4), name = "") +
scale_y_continuous(name = "", expand = c(0.005,0.05), breaks = scales::pretty_breaks(n =5)) +
annotate("text", x = -1.3, y = 700, label = txt["ylab", langr], colour = "#2b2b2b", hjust = 0)
igp <- ggiraph(
code = {print(gp)},
height_svg = 5,
hover_css = "stroke-width:1.7px;stroke-opacity:0.95;cursor:pointer;",
width = 1,
fonts = list(sans = "Open Sans Condensed")
)
# igp
source <- paste0(
txt['source', lang], ": ", htmlLink(txt['source.url', lang], txt['source.name', lang]), " | ",
txt['code', lang], ": ", htmlLink(txt['code.url', lang], txt['code.name', lang]), " | ",
htmlLink("http://www.swissinfo.ch", 'swissinfo.ch'), " | ",
htmlLink("https://twitter.com/duc_qn", '@duc_qn')
)
save_html(
tags$html(
tags$head(includeHTML("styles2.html")),
tags$body(
h2(HTML(txt["title", lang])),
div(class = "descr", HTML(txt["descr", lang])),
div(class="container", igp),
div(id = "cite", HTML(source)),
HTML(iframeresizer)
)), file = paste0("Primes_2017_byCantonInsurer_", lang, ".html"), libdir = "js", background = "#f3f3f2"
)
}
# select: tarif : BASE (not HMO, ..)
# sans assurance accident, adultes, franchise 500.-
dd <- data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
# order canton by average prime
dd %<>% group_by(Kanton, Versicherer) %>%
summarise(prime = mean(Prämie)) %>% ungroup()
ct.ordered <- dd %>% group_by(Kanton) %>% summarise(meanPrime = mean(prime)) %>%
ungroup() %>% arrange(meanPrime) %>% select(Kanton) %>% unlist(use.names = F) %>% as.character()
dd$Kanton <- factor(dd$Kanton, levels = ct.ordered)
# order insurer by average prime
insurer.ordered <- dd %>% group_by(Kanton) %>% mutate( rk = rank(prime)) %>% ungroup()
insurer.rank <- insurer.ordered %>% group_by(Versicherer) %>% summarise(meanRank = mean(rk)) %>%
ungroup() %>% arrange(meanRank)
insurer.ordered <- insurer.rank %>% select(Versicherer)  %>% unlist(use.names = F)
names(insurer.ordered) <- insurer[match(insurer.ordered, insurer[,1]), 'shortName']
dd$insurerName <- factor(insurer[match(dd$Versicherer,  insurer[,1]), 'shortName'], levels = names(insurer.ordered))
dd$insurerRank <- insurer.rank[match(dd$Versicherer, insurer.rank$Versicherer), 'meanRank'] %>% unlist(use.names = F)
dd
dd <- data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
# order canton by average prime
dd %<>% group_by(Kanton, Versicherer) %>%
summarise(prime = mean(Prämie)) %>% ungroup()
ct.ordered <- dd %>% group_by(Kanton) %>% summarise(meanPrime = mean(prime)) %>%
ungroup() %>% arrange(meanPrime) %>% select(Kanton) %>% unlist(use.names = F) %>% as.character()
dd$Kanton <- factor(dd$Kanton, levels = ct.ordered)
# order insurer by average prime
insurer.ordered <- dd %>% group_by(Kanton) %>% mutate( rk = rank(prime)) %>% ungroup()
insurer.rank <- insurer.ordered %>% group_by(Versicherer) %>% summarise(meanRank = mean(rk)) %>%
ungroup() %>% arrange(meanRank)
insurer.ordered <- insurer.rank %>% select(Versicherer)  %>% unlist(use.names = F)
warnings()
dd <- data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
str(dd)
data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
dd <- data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
dd
dd <- data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
dd %<>% group_by(Kanton, Versicherer) %>%
summarise(prime = mean(Prämie)) %>% ungroup()
ct.ordered <- dd %>% group_by(Kanton) %>% summarise(meanPrime = mean(prime)) %>%
ungroup() %>% arrange(meanPrime) %>% select(Kanton) %>% unlist(use.names = F) %>% as.character()
dd$Kanton <- factor(dd$Kanton, levels = ct.ordered)
str(dd)
data.read$Prämie
str(data.read)
data.read <- read.csv2(data.file, encoding = "latin1")
insurer <- read.csv(insurer.file)
data.read <- data.read %>% select(-Hoheitsgebiet, -Geschäftsjahr, -Erhebungsjahr)
data.read$Prämie <- as.numeric(as.character(data.read$Prämie))
data.read$Prämie
dd <- data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
# order canton by average prime
dd %<>% group_by(Kanton, Vstersicherer) %>%
summarise(prime = mean(Prämie)) %>% ungroup()
ct.ordered <- dd %>% group_by(Kanton) %>% summarise(meanPrime = mean(prime)) %>%
ungroup() %>% arrange(meanPrime) %>% select(Kanton) %>% unlist(use.names = F) %>% as.character()
dd$Kanton <- factor(dd$Kanton, levels = ct.ordered)
dd <- data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
dd
dd %<>% group_by(Kanton, Versicherer) %>%
summarise(prime = mean(Prämie)) %>% ungroup()
ct.ordered <- dd %>% group_by(Kanton) %>% summarise(meanPrime = mean(prime)) %>%
ungroup() %>% arrange(meanPrime) %>% select(Kanton) %>% unlist(use.names = F) %>% as.character()
dd$Kanton <- factor(dd$Kanton, levels = ct.ordered)
dd
translation.file <- "input/Health insurance base 2018 - Sheet1.csv"
data.file <- "data/Prämien_CH.csv"
insurer.file <- "data/insurer_CH_01_10_2016.csv"
library(readr)
library(tidyr)
library(dplyr)
library(magrittr)
library(countrycode)
library(ggplot2)
library(swiMap)
library(swiTheme)
library(viridis)
library(ggiraph)
library(htmltools)
library(swiRcharts)
data.read <- read.csv2(data.file, encoding = "latin1")
insurer <- read.csv(insurer.file)
data.read <- data.read %>% select(-Hoheitsgebiet, -Geschäftsjahr, -Erhebungsjahr)
data.read$Prämie <- as.numeric(as.character(data.read$Prämie))
txt <- loadTranslation(translation.file)
unique(data.read$Versicherer)
length(unique(data.read$Versicherer))
translation.file <- "input/Health insurance base 2018 - Sheet1.csv"
data.file <- "data/Prämien_CH.csv"
insurer.file <- "data/insurer_CH_01_10_2016.csv"
library(readr)
library(tidyr)
library(dplyr)
library(magrittr)
library(countrycode)
library(ggplot2)
library(swiMap)
library(swiTheme)
library(viridis)
library(ggiraph)
library(htmltools)
library(swiRcharts)
data.read <- read.csv2(data.file, encoding = "latin1")
insurer <- read.csv(insurer.file)
data.read <- data.read %>% select(-Hoheitsgebiet, -Geschäftsjahr, -Erhebungsjahr)
data.read$Prämie <- as.numeric(as.character(data.read$Prämie))
# Number of insurers
length(unique(data.read$Versicherer))
txt <- loadTranslation(translation.file)
# select: tarif : BASE (not HMO, ..)
# sans assurance accident, adultes, franchise 500.-
dd <- data.read %>% filter(Tarif == "BASE", Unfalleinschluss == "OHN-UNF",
Altersklasse == 'AKL-ERW', Franchise == 'FRA-500', Kanton != "ZE")
# order canton by average prime
dd %<>% group_by(Kanton, Versicherer) %>%
summarise(prime = mean(Prämie)) %>% ungroup()
ct.ordered <- dd %>% group_by(Kanton) %>% summarise(meanPrime = mean(prime)) %>%
ungroup() %>% arrange(meanPrime) %>% select(Kanton) %>% unlist(use.names = F) %>% as.character()
dd$Kanton <- factor(dd$Kanton, levels = ct.ordered)
# order insurer by average prime
insurer.ordered <- dd %>% group_by(Kanton) %>% mutate( rk = rank(prime)) %>% ungroup()
insurer.rank <- insurer.ordered %>% group_by(Versicherer) %>% summarise(meanRank = mean(rk)) %>%
ungroup() %>% arrange(meanRank)
insurer.ordered <- insurer.rank %>% select(Versicherer)  %>% unlist(use.names = F)
names(insurer.ordered) <- insurer[match(insurer.ordered, insurer[,1]), 'shortName']
dd$insurerName <- factor(insurer[match(dd$Versicherer,  insurer[,1]), 'shortName'], levels = names(insurer.ordered))
dd$insurerRank <- insurer.rank[match(dd$Versicherer, insurer.rank$Versicherer), 'meanRank'] %>% unlist(use.names = F)
lang <- 'FR'
for(lang in colnames(txt)) {
cat("\n", lang)
langr <- ifelse(lang == 'AR', 'EN', lang)
ddd <- dd
ct.lang <- switch(lang,
'EN' = 'eng', 'FR' = 'fre', 'DE' = 'ger',
'IT' = 'ita', 'PT' = 'por', 'RU' = 'rus',
'ES' = 'spa', 'JA' = 'jpn', 'ZH' = 'chi',
'AR' = 'eng'
)
ddd$canton <- canton_CH[match(ddd$Kanton, canton_CH$iso2), ct.lang]
ddd$canton <- factor(ddd$canton, canton_CH[match(ct.ordered, canton_CH$iso2), ct.lang])
gp <- ggplot(data = ddd) +
# geom_violin(aes(x = canton, y = prime, group = canton), linetype = "blank", fill = "#e5dbcd", alpha = 0.6) +
geom_line(data = ddd %>% group_by(canton) %>% summarise(prime = median(prime)) %>%
ungroup(), aes(x = canton, y = prime, group = 1), size = 0.5, alpha = 0.9, colour = "darkgrey") +
geom_line_interactive(aes(x = canton, y = prime, group = insurerName, color = insurerRank, tooltip = insurerName, data_id = insurerName), size = 0.15, alpha = 0.25) +
geom_point(aes(x = canton, y = prime, group = insurerName, color = insurerRank), size = 0.8, alpha = 0.6, shape = 18) +
geom_text(data  = ddd %>% filter(Kanton == "GE"), aes(x = canton, y = prime, label = insurerName), nudge_y = -1, nudge_x = 0.35, hjust = 0, size = 2, family = "Open Sans Condensed", check_overlap = T, colour = "#330033") +
swi_theme(y_gridlines = F, base_size = 12, base_family = "Open Sans Condensed") +
theme(
legend.position = "none",
axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5),
axis.text.y = element_text(margin=margin(0,-1.5,0,0) ),
plot.background=element_rect(fill= "#f3f3f2", colour = "#f3f3f2"),
plot.margin = unit(c(0, 0.5, ifelse(lang == 'ZH', 1, -2), -0.8), "lines")
)+
scale_color_viridis(option = "C") +
scale_x_discrete(expand = c(0, 2.4), name = "") +
scale_y_continuous(name = "", expand = c(0.005,0.05), breaks = scales::pretty_breaks(n =5)) +
annotate("text", x = -1.3, y = 700, label = txt["ylab", langr], colour = "#2b2b2b", hjust = 0)
igp <- ggiraph(
code = {print(gp)},
height_svg = 5,
hover_css = "stroke-width:1.7px;stroke-opacity:0.95;cursor:pointer;",
width = 1,
fonts = list(sans = "Open Sans Condensed")
)
# igp
source <- paste0(
txt['source', lang], ": ", htmlLink(txt['source.url', lang], txt['source.name', lang]), " | ",
txt['code', lang], ": ", htmlLink(txt['code.url', lang], txt['code.name', lang]), " | ",
htmlLink("http://www.swissinfo.ch", 'swissinfo.ch'), " | ",
htmlLink("https://twitter.com/duc_qn", '@duc_qn')
)
save_html(
tags$html(
tags$head(includeHTML("styles2.html")),
tags$body(
h2(HTML(txt["title", lang])),
div(class = "descr", HTML(txt["descr", lang])),
div(class="container", igp),
div(id = "cite", HTML(source)),
HTML(iframeresizer)
)), file = paste0("Primes_2018_byCantonInsurer_", lang, ".html"), libdir = "js", background = "#f3f3f2"
)
}
cat("\n", lang)
langr <- ifelse(lang == 'AR', 'EN', lang)
ddd <- dd
ct.lang <- switch(lang,
'EN' = 'eng', 'FR' = 'fre', 'DE' = 'ger',
'IT' = 'ita', 'PT' = 'por', 'RU' = 'rus',
'ES' = 'spa', 'JA' = 'jpn', 'ZH' = 'chi',
'AR' = 'eng'
)
ddd$canton <- canton_CH[match(ddd$Kanton, canton_CH$iso2), ct.lang]
ddd$canton <- factor(ddd$canton, canton_CH[match(ct.ordered, canton_CH$iso2), ct.lang])
gp <- ggplot(data = ddd) +
# geom_violin(aes(x = canton, y = prime, group = canton), linetype = "blank", fill = "#e5dbcd", alpha = 0.6) +
geom_line(data = ddd %>% group_by(canton) %>% summarise(prime = median(prime)) %>%
ungroup(), aes(x = canton, y = prime, group = 1), size = 0.5, alpha = 0.9, colour = "darkgrey") +
geom_line_interactive(aes(x = canton, y = prime, group = insurerName, color = insurerRank, tooltip = insurerName, data_id = insurerName), size = 0.15, alpha = 0.25) +
geom_point(aes(x = canton, y = prime, group = insurerName, color = insurerRank), size = 0.8, alpha = 0.6, shape = 18) +
geom_text(data  = ddd %>% filter(Kanton == "GE"), aes(x = canton, y = prime, label = insurerName), nudge_y = -1, nudge_x = 0.35, hjust = 0, size = 2, family = "Open Sans Condensed", check_overlap = T, colour = "#330033") +
swi_theme(y_gridlines = F, base_size = 12, base_family = "Open Sans Condensed") +
theme(
legend.position = "none",
axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5),
axis.text.y = element_text(margin=margin(0,-1.5,0,0) ),
plot.background=element_rect(fill= "#f3f3f2", colour = "#f3f3f2"),
plot.margin = unit(c(0, 0.5, ifelse(lang == 'ZH', 1, -2), -0.8), "lines")
)+
scale_color_viridis(option = "C") +
scale_x_discrete(expand = c(0, 2.4), name = "") +
scale_y_continuous(name = "", expand = c(0.005,0.05), breaks = scales::pretty_breaks(n =5)) +
annotate("text", x = -1.3, y = 700, label = txt["ylab", langr], colour = "#2b2b2b", hjust = 0)
igp <- ggiraph(
code = {print(gp)},
height_svg = 5,
hover_css = "stroke-width:1.7px;stroke-opacity:0.95;cursor:pointer;",
# width = 1,
fonts = list(sans = "Open Sans Condensed")
)
# igp
source <- paste0(
txt['source', lang], ": ", htmlLink(txt['source.url', lang], txt['source.name', lang]), " | ",
txt['code', lang], ": ", htmlLink(txt['code.url', lang], txt['code.name', lang]), " | ",
htmlLink("http://www.swissinfo.ch", 'swissinfo.ch'), " | ",
htmlLink("https://twitter.com/duc_qn", '@duc_qn')
)
igp
source
lang <- 'FR'
save_html(
tags$html(
tags$head(includeHTML("styles2.html")),
tags$body(
h2(HTML(txt["title", lang])),
div(class = "descr", HTML(txt["descr", lang])),
div(class="container", igp),
div(id = "cite", HTML(source)),
HTML(iframeresizer)
)), file = paste0("Primes_2018_byCantonInsurer_", lang, ".html"), libdir = "js", background = "#f3f3f2"
)
save_html(
tags$html(
tags$head(includeHTML("styles2.html")),
tags$body(
h2(HTML(txt["title", lang])),
div(class = "descr", HTML(txt["descr", lang])),
# div(class="container", igp),
div(id = "cite", HTML(source)),
HTML(iframeresizer)
)), file = paste0("Primes_2018_byCantonInsurer_", lang, ".html"), libdir = "js", background = "#f3f3f2"
)
